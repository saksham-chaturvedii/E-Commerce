#!/usr/bin/env node

/**
 * Module dependencies.
 */

// var app = require("../app");
// var debug = require("debug")("day-11:server");
// var http = require("http");
// const { PORT } = require("../config");
// /**
//  * Get port from environment and store in Express.
//  */

// var port = normalizePort(PORT || "3000");
// app.set("port", port);

// /**
//  * Create HTTP server.
//  */

// var server = http.createServer(app);

// /**
//  * Listen on provided port, on all network interfaces.
//  */

// server.listen(port);
// server.on("error", onError);
// server.on("listening", onListening);

// /**
//  * Normalize a port into a number, string, or false.
//  */

// function normalizePort(val) {
//   var port = parseInt(val, 10);

//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }

//   if (port >= 0) {
//     // port number
//     return port;
//   }

//   return false;
// }

// /**
//  * Event listener for HTTP server "error" event.
//  */

// function onError(error) {
//   if (error.syscall !== "listen") {
//     throw error;
//   }

//   var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case "EACCES":
//       console.error(bind + " requires elevated privileges");
//       process.exit(1);
//       break;
//     case "EADDRINUSE":
//       console.error(bind + " is already in use");
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

// /**
//  * Event listener for HTTP server "listening" event.
//  */

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
//   console.log("Listening on " + bind);
// }

/**
 *
 *
 *
 *
 * HTTPS
 *
 *
 *
 *
 *
 */

var app = require("../app");
const { PORT } = require("../config");
const https = require("https");
const fs = require("fs");
const path = require("path");

var port = normalizePort(PORT || "3000");
app.set("port", port);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
// console.log("path1-> ", path.resolve("./localhost-key.pem"));
// console.log("path2-> ", "./localhost-key.pem");
console.log(path.resolve());
const options = {
  // key: fs.readFileSync(path.resolve("./localhost-key.pem")), -> works
  // key: fs.readFileSync(path.path(__dirname, "./localhost-key.pem")), -> works
  // RFS preappends the root directory path
  // key: fs.readFileSync("\localhost-key.pem"),
  // Replace with the path to your key
  cert: fs.readFileSync(path.resolve("./localhost.pem")),
  // Replace with the path to your certificate
};

https.createServer(options, app).listen(port, () => {
  console.log("Server listening on port " + port);
});
